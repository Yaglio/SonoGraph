@page "/editor"
@rendermode InteractiveWebAssembly

@inject AudioPlayerService audioPlayerService
@inject AudioEditorService audioEditorService

@using SonoGraph.Client.Models

<!--AudioEditor UI. Has functions to display and delete many audios at once and to control the playback of audios.
API:
removeAudio(Audio), addAudio(Audio), getParent(Sound), getSelectedAudios(), getSelectedSounds()

TODO: External methods for audio editing (also removeSelected is unfinished).
Getting input from drawing board.
Adding Buttons for new tools

Author: DaveH-->

<!--global header-->

<header class="gHeader">
	<h3 class="pageTitle">Audio Editor</h3>
	<span class="gVolDisplay"> Global volume: @audioPlayerService.MasterVolume%</span>
	<input class="globalVol" type="range" min="0" max="100" @bind="@audioPlayerService.MasterVolume" @bind:event="oninput" />
</header>

<div class="editorcontainer">
	<div class="contentcontainer">
		<h3>Audio tracks</h3>
		@foreach (var audio in audioEditorService.AudioCollection)
		{
			<div class="audioItem">
				<button class="audioIndex"
				style="border: @(_selectedAudios.Contains(audio) ? "3px solid #FF6347" : "2px solid black");"
				@onclick="@(() => SelectAudio(audio))">
					A
				</button>

				@foreach (var sound in audio.Sounds)
				{
					<button type="button"
					class="bar"
					style="width: @(sound.Duration * _scaleWidth)px;
								height: @(GetHeight(sound.Frequency))px;
								background-color: @GetColorForAudio(audio);
								border: @((_selectedSounds.ContainsKey(audio) && _selectedSounds[audio].Contains(sound)) || _selectedAudios.Contains(audio) ? "2px solid #FF6347" : "2px solid black");"
					@onclick="@(() => SelectSound(sound, audio))">
					</button>
				}

			</div>
		}

		<!-- Scale -->
		<div class="scale" style="width:@(GetMaxWidth() * _scaleWidth)px;">
			@{
				double maxTime = GetMaxWidth(); // in ms
				double pixelPerMs = _scaleWidth;

				if (maxTime > 0)
				{
					for (int time = 0; time < maxTime; time += 250)
					{
						double left = time * pixelPerMs;
						<span class="scaleMark" style="left:@(left)px;"></span>

						if (time % 500 == 0)
						{
							double sec = time / 1000.0;
							<span class="scaleLabel" style="left:@(left)px;">@sec</span>
						}
					}
				}
			}
		</div>
	</div>


	<div class="toolcontainer">
		<h3>Tools</h3>
		<p class="counter">@GetSelectedAudiosText()</p>
		<p class="counter">@GetSelectedSoundsText()</p>
		<p class="counter">@GetLastSelectedFreqText()</p>
		<div class="toolCat">
			<p class="toolCatName">Audio modification</p>
			<button class="toolD" @onclick="DeleteSelected">Delete selected</button>
			<button class="toolD" @onclick="DeleteAllAudios">Delete all audios</button>
			<button class="tool" @onclick="Merge">Merge tracks</button>
			<button class="tool" @onclick="ShortenAudios">Shorten audios</button>
			<button class="tool" @onclick="ToggleCompress">Compress: @_compress</button>
			<div class="field">Frequency (Hz):<input type="number" class="input" @bind="_newFrequency" /></div>
			<button class="tool" @onclick="SetFrequency">Apply frequency</button>
		</div>
		<div class="toolCat">
			<p class="toolCatName">Playback control</p>
			<div class="half">
				<button class="tool" @onclick="Play">Play</button>
				<button class="tool" @onclick="Stop">Stop</button>
			</div>
			<p class="toolCatName">Time elapsed: @playTime</p>
		</div>
	</div>
</div>


@code {

	private HashSet<Audio> _selectedAudios = new();
	private Dictionary<Audio, HashSet<Sound>> _selectedSounds = new();

	private double _scaleWidth = 0.2;

	private Boolean _compress;
	private int _newFrequency = 0;

	private Sound ?_lastSound = null;
	private Dictionary<Audio, string> _audioColors = new();

	#region Events
	/// <summary>
	/// 
	/// </summary>
	private void DeleteSelected()
	{
		audioEditorService.RemoveAudio(_selectedAudios);

		audioEditorService.RemoveSounds(_selectedSounds);

		ResetSelection();
	}

	/// <summary>
	/// 
	/// </summary>
	private void DeleteAllAudios()
	{
		audioEditorService.RemoveAudio();

		ResetSelection();
	}

	/// <summary>
	/// 
	/// </summary>
	private void Merge()
	{
		audioEditorService.MergeAudios(_selectedAudios);

		ResetSelection();
	}

	/// <summary>
	/// 
	/// </summary>
	private void ShortenAudios()
	{
		audioEditorService.ShortenAudios(_selectedAudios, _compress);

		ResetSelection();
	}

	/// <summary>
	/// 
	/// </summary>
	private void ToggleCompress()
	{
		_compress = !_compress;
	}

	/// <summary>
	/// 
	/// </summary>
	private void SetFrequency()
	{
		audioEditorService.UpdateSoundFrequencies(_selectedSounds.Values.SelectMany(set => set).ToList(), _newFrequency);

		ResetSelection();
	}

	/// <summary>
	///
	/// </summary>
	/// <param name="sound"></param>
	/// <param name="audio"></param>
	void SelectSound(Sound sound, Audio audio)
	{
		HashSet<Sound> soundSet;

		if (_selectedSounds.ContainsKey(audio))
		{
			soundSet = _selectedSounds.GetValueOrDefault(audio, new HashSet<Sound>());
		}
		else
		{
            soundSet = new HashSet<Sound>();
            _selectedSounds.Add(audio, soundSet);
		}

		if (soundSet.Contains(sound))
		{
			soundSet.Remove(sound);

			if (_selectedAudios.Contains(audio))
			{
				_selectedAudios.Remove(audio);
			}

			if (soundSet.Count == 0)
			{
				_selectedSounds.Remove(audio);
			}

			_lastSound = null;
		}
		else
		{
			soundSet.Add(sound);

			if (!_selectedAudios.Contains(audio) && audio.Sounds.All(s => soundSet.Contains(s)))
			{
				_selectedAudios.Add(audio);
			}

			_lastSound = sound;
		}
	}

	/// <summary>
	///
	/// </summary>
	/// <param name="audio"></param>
	void SelectAudio(Audio audio)
	{
		var SoundSet = _selectedSounds.GetValueOrDefault(audio, new HashSet<Sound>());

		if (_selectedAudios.Contains(audio))
		{
			_selectedAudios.Remove(audio);

			audio.Sounds.ForEach(sound => SoundSet.Remove(sound));
		}
		else
		{
			_selectedAudios.Add(audio);

			audio.Sounds.ForEach(sound =>
			{
				SoundSet.Add(sound);
			});
		}
	}

	private async Task Play()
	{
		await Stop();
		if (!_selectedAudios.Any())
			return; // Nothing to play

		playTime = 0;

		foreach (var audio in _selectedAudios)
		{
			var cts = new CancellationTokenSource();
			if (timeTrackerCts == null)
			{
				timeTrackerCts = cts;
			}
			playbackTokens[audio] = cts;

			_ = PlayAudioAsync(audio, cts.Token);
		}

		_ = TrackPlayTimeAsync(timeTrackerCts.Token);
	}

	private async Task Stop()
	{
		foreach (var kv in playbackTokens)
		{
			kv.Value.Cancel();
		}

		timeTrackerCts?.Cancel();
		timeTrackerCts = null;

		await Task.Delay(100);

		playbackTokens.Clear();
		playTime = 0;
	}
	#endregion

	#region view

	private void ResetSelection()
	{
		_selectedAudios.Clear();
		_selectedSounds.Clear();
		_lastSound = null; // Reset last selected sound after any change
	}

	/// <summary>
	///
	/// </summary>
	/// <returns></returns>
	private string GetSelectedAudiosText()
	{
		if (_selectedAudios.Count > 0)
		{
			return $"Selected {_selectedAudios.Count} audio track(s)";
		}
		return "No audio tracks selected";
	}

	/// <summary>
	///
	/// </summary>
	/// <returns></returns>
	private string GetSelectedSoundsText()
	{
		if (_selectedSounds.Count > 0)
		{
			return $"Selected {_selectedSounds.Values.SelectMany(set => set).ToList().Count} sound(s)";
		}
		return "No sounds selected";
	}

	/// <summary>
	///
	/// </summary>
	/// <returns></returns>
	private string GetLastSelectedFreqText()
	{
		if (_lastSound != null)
		{
			return $"Last selected frequency: {(int)_lastSound.Frequency} Hz";
		}
		return "No frequency selected";
	}

	/// <summary>
	/// 
	/// </summary>
	/// <param name="frequency"></param>
	/// <returns></returns>
	private int GetHeight(double frequency)
	{
		if (frequency < 0) frequency = 0;

		if (frequency <= 100)
		{
			// 0 - 100hz → 25px
			return (int)((frequency / 100.0) * 25);
		}
		else if (frequency <= 1000)
		{
			// 100 - 1000hz → 100px
			return 25 + (int)(((frequency - 100) / 900.0) * 100);
		}
		else
		{
			// 1000 - 20000hz → 75px
			return 125 + (int)(((frequency - 1000) / 19000.0) * 75);
		}
	}

	/// <summary>
	///
	/// </summary>
	/// <param name="audio"></param>
	/// <returns></returns>
	private double GetWidth(Audio audio)
	{
		return AudioUtils.GetDuration(audio);
	}

	/// <summary>
	/// 
	/// </summary>
	/// <returns></returns>
	private double GetMaxWidth()
	{
		if (audioEditorService.AudioCollection.Any())
		{
			return audioEditorService.AudioCollection.Max(audio => GetWidth(audio));
		}
		return 0;
	}

	/// <summary>
	/// 
	/// </summary>
	/// <param name="audio"></param>
	/// <returns></returns>
	private string GetColorForAudio(Audio audio)
	{
		if (!_audioColors.TryGetValue(audio, out var color))
		{
			// Assign a color based on current count to cycle through colors array
			int index = _audioColors.Count % Colors.Length;
			color = Colors[index];
			_audioColors[audio] = color;
		}
		return color;
	}

	#endregion

	#region Playback

	private Dictionary<Audio, CancellationTokenSource> playbackTokens = new();
	private CancellationTokenSource? timeTrackerCts;
	private int playTime;

	private async Task PlayAudioAsync(Audio audio, CancellationToken token)
	{
		try
		{
			await audioPlayerService.Play(audio, token);
		}
		catch (OperationCanceledException)
		{
			Console.WriteLine($"Playback of {audio.GetHashCode()} cancelled.");
		}
	}

	private async Task TrackPlayTimeAsync(CancellationToken token)
	{
		try
		{
			while (!token.IsCancellationRequested)
			{
				await Task.Delay(1000, token);
				playTime++;
				await InvokeAsync(StateHasChanged);
			}
		}
		catch (TaskCanceledException) { }
	}

	#endregion

	private static String[] Colors =
	{
		"#FF9F80", // Light Red-Orange
        "#80FF9F", // Light Green
        "#809FFF", // Light Blue
        "#F1E0A3", // Light Yellow
        "#D7A1D4", // Soft Purple
        "#F1A15F", // Soft Orange
        "#70D1D1", // Light Turquoise
        "#A1E1A1", // Soft Emerald Green
        "#F1C676", // Soft Golden Yellow
        "#B58BCA"  // Light Dark Purple
	};
}
