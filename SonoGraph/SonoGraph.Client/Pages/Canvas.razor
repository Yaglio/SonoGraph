@page "/canvas"
@rendermode InteractiveWebAssembly

@using System.Drawing

@inject IJSRuntime JSRuntime

<h3>Canvas</h3>

<p>Mouse position x: @_mouse.X</p>
<p>Mouse position y: @_mouse.Y</p>
<p>Drawing active: @_isDrawing</p>
<p>On cooldown: @_isCooldown</p>

<canvas id="myCanvas" width="1000" height="500" style="border:1px solid #000000;"
@onmousedown="OnMouseDown"
@onmousemove="OnMouseMove" 
@onmouseup="OnMouseUp" 
@onmouseleave="OnMouseUp" 
@ontouchstart="OnTouchStart"
@ontouchmove="OnTouchMove"
@ontouchend="OnTouchEnd"
@ontouchleave="OnTouchEnd"/>

@code {

    private bool _isDrawing = false;
    private bool _isCooldown = false;
    private Coordinate _mouse = new Coordinate();

    private Color strokeColor = Color.DeepSkyBlue;

    private Coordinate _canvasOffset;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _canvasOffset = await JSRuntime.InvokeAsync<Coordinate>("initializeDrawing", "myCanvas");
        }
    }

    #region InputEvents

    private async Task OnMouseDown(MouseEventArgs e)
    {
        await StartDrawing(e.OffsetX, e.OffsetY);
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        _mouse.X = e.OffsetX;
        _mouse.Y = e.OffsetY;

        await Draw(e.OffsetX, e.OffsetY);
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        await StopDrawing();
    }

    private async Task OnTouchStart(TouchEventArgs e)
    {
        var touchPoint = e.TargetTouches.FirstOrDefault();

        if (touchPoint == null) return;

        await StartDrawing(touchPoint.ClientX - _canvasOffset.X, touchPoint.ClientY - _canvasOffset.Y);
    }

    private async Task OnTouchMove(TouchEventArgs e)
    {
        var touchPoint = e.TargetTouches.FirstOrDefault();

        if (touchPoint == null) return;

        await Draw(touchPoint.ClientX - _canvasOffset.X, touchPoint.ClientY - _canvasOffset.Y);
    }

    private async Task OnTouchEnd(TouchEventArgs e)
    {
        await StopDrawing();
    }

    #endregion

    private async Task StartDrawing(double x, double y) {
        if (_isCooldown) return;

        await JSRuntime.InvokeVoidAsync("startDrawing", x, y, ColorTranslator.ToHtml(strokeColor));

        _isDrawing = true;
    }

    private async Task Draw(double x, double y)
    {
        if (!_isDrawing) return;

        await JSRuntime.InvokeVoidAsync("draw", x, y);

        // await SendDrawData(_mouse, dateTime)

        // await SoundService.ProcessSound(PostionObjekt);
    }

    private async Task StopDrawing()
    {
        if (_isCooldown || !_isDrawing) return;

        _isDrawing = false;
        _isCooldown = true;

        await JSRuntime.InvokeVoidAsync("stopDrawing");

        await Task.Delay(2000);

        await JSRuntime.InvokeVoidAsync("clearCanvas");

        _isCooldown = false;
    }
}
