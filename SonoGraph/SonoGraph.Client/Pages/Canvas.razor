@page "/canvas"
@rendermode InteractiveWebAssembly

@using System.Drawing

@inject IJSRuntime JSRuntime
@inject AudioPlayerService audioPlayerService
@inject SoundService soundService

<!--test header to show global volume. Header is removeable-->
<header class="gHeader">
    <h3 class="pageTitle">Canvas</h3>
    <span class="gVolDisplay"> Global volume: @audioPlayerService.MasterVolume%</span>
    <input class="globalVol" type="range" min="0" max="100" @bind="@audioPlayerService.MasterVolume" @bind:event="oninput" />
</header>

<div class="editorcontainer">
    <div class="canvas-container" style="width:100%; height:100%;">
        <canvas id="myCanvas" style="border:1px solid width:100%; height:100%; #000000; background-image: url(/Images/paper.png);  background-size: cover; "
                @onmousedown="OnMouseDown"
                @onmousemove="OnMouseMove"
                @onmouseup="OnMouseUp"
                @onmouseleave="OnMouseUp"
                @ontouchstart="OnTouchStart"
                @ontouchmove="OnTouchMove"
                @ontouchend="OnTouchEnd"
                @ontouchleave="OnTouchEnd" />
    </div>
</div>



@code {

    private bool _isDrawing = false;
    private Coordinate _mouse = new Coordinate();

    private Color strokeColor = Color.DeepSkyBlue;

    private Coordinate _canvasOffset;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupCanvasResizeHandler", "myCanvas");

            _canvasOffset = await JSRuntime.InvokeAsync<Coordinate>("initializeDrawing", "myCanvas");
        }
    }

    #region InputEvents

    private async Task OnMouseDown(MouseEventArgs e)
    {
        await StartDrawing(e.OffsetX, e.OffsetY);
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        _mouse.X = e.OffsetX;
        _mouse.Y = e.OffsetY;

        await Draw(e.OffsetX, e.OffsetY);
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        await StopDrawing();
    }

    private async Task OnTouchStart(TouchEventArgs e)
    {
        var touchPoint = e.TargetTouches.FirstOrDefault();

        if (touchPoint == null) return;

        await StartDrawing(touchPoint.ClientX - _canvasOffset.X, touchPoint.ClientY - _canvasOffset.Y);
    }

    private async Task OnTouchMove(TouchEventArgs e)
    {
        var touchPoint = e.TargetTouches.FirstOrDefault();

        if (touchPoint == null) return;

        await Draw(touchPoint.ClientX - _canvasOffset.X, touchPoint.ClientY - _canvasOffset.Y);
    }

    private async Task OnTouchEnd(TouchEventArgs e)
    {
        await StopDrawing();
    }

    #endregion

    private async Task StartDrawing(double x, double y) {
        await JSRuntime.InvokeVoidAsync("clearCanvas");

        await JSRuntime.InvokeVoidAsync("startDrawing", x, y, ColorTranslator.ToHtml(strokeColor));

        _isDrawing = true;
        //await soundService.StartSound(new Coordinate(x, y), WaveFormType.Sine);
    }

    private async Task Draw(double x, double y)
    {
        if (!_isDrawing) return;

        await JSRuntime.InvokeVoidAsync("draw", x, y);

        //await SendDrawData(_mouse, dateTime)

       // await soundService.ProcessSound(new Coordinate(x, y));
    }

    private async Task StopDrawing()
    {
        if (!_isDrawing) return;

        _isDrawing = false;

        await JSRuntime.InvokeVoidAsync("stopDrawing");

        //soundService.EndSound();
    }
}
